@inject HttpClient _client

<EditForm Model="@job_infos" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>job_Category: </label>
            <div>
                <InputSelect @bind-Value="job_infos.job_Category" class="form-control">
                    <option value="">-- Select Category --</option>
                    @if (job_Categorys != null)
                    {
                        foreach (var job_Category in job_Categorys)
                        {
                            <option value="@job_Category.Id">@job_Category.category </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job_infos.job_Category)" />
            </div>
        </div>

        <div class="form-group">
            <label>Region: </label>
            <div>
                <InputSelect @bind-Value="job_infos.job_location" class="form-control">
                    <option value="">-- Select Region --</option>
                    @if (job_locations != null)
                    {
                        foreach (var job_Location in job_locations)
                        {
                            <option value="@job_Location.Id">@job_Location.location_Name </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job_infos.job_location)" />
            </div>
        </div>

        <div class="form-group">
            <label>Company: </label>
            <div>
                <InputSelect @bind-Value="job_infos.company_info" class="form-control">
                    <option value="">-- Select Company --</option>
                    @if (company_infos != null)
                    {
                        foreach (var company_Info in company_infos)
                        {
                            <option value="@company_Info.Id">@company_Info.Name - @company_Info.Contact</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job_infos.company_info)" />
            </div>
        </div>

        <div class="form-group">
            <label>Job Title: </label>
            <div>
                <InputText @bind-Value="@job_infos.job_title" class="form-control" />
                <ValidationMessage For="@(() => job_infos.job_title)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputTextArea @bind-Value="@job_infos.job_description" class="form-control" />
                <ValidationMessage For="@(() => job_infos.job_description)" />
            </div>
        </div>

        <div class="form-group">
            <label>Salary: </label>
            <div>
                <InputText @bind-Value="@job_infos.job_salary" class="form-control" />
                <ValidationMessage For="@(() => job_infos.job_salary)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Out: </label>
            <div>
                <InputText @bind-Value="@job_infos.type" class="form-control" />
                <ValidationMessage For="@(() => job_infos.type)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Out: </label>
            <div>
                <InputDate @bind-Value="@job_infos.no_of_vacancy" class="form-control" />
                <ValidationMessage For="@(() => job_infos.no_of_vacancy)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="job_infos" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public job_info job_infos { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<job_Category> job_Categorys;
    private IList<job_location> job_locations;
    private IList<Company_info> company_infos;

    protected async override Task OnInitializedAsync()
    {
        job_Categorys = await _client.GetFromJsonAsync<List<job_Category>>($"{Endpoints.Job_CategorysEndpoint}");
        job_locations = await _client.GetFromJsonAsync<List<job_location>>($"{Endpoints.Job_locationsEndpoint}");
        company_infos = await _client.GetFromJsonAsync<List<Company_info>>($"{Endpoints.Company_infosEndpoint}");
        //job_info.DateOut = DateTime.Now;
    }
}