@page "/job_locations/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Job Region</h3>
<br />
<AuthorizeView Roles="Administrator,Admin">
    <a href="/job_locations/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Create New Region
    </a>
</AuthorizeView>
    <br />
    <br />

    @if (job_locations == null)
    {
<div class="alert alert-info">Loading job_locations....</div> }
                else
                {
<table class="table table-responsive">
    <thread>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thread>
    <tbody>
        @foreach (var job_location in job_locations)
        {
<tr>
    <td>@job_location.location_Name</td>
    <td>
        <a href="/job_locations/view/@job_location.Id" class="btn btn-primary">
            <span class="oi oi-book"></span>
        </a>
        <a href="/job_locations/edit/@job_location.Id" class="btn btn-warning">
            <span class="oi oi-pencil"></span>
        </a>
        <button class="btn btn-danger" @onclick="@(()=>Delete(job_location.Id))">
            <span class="oi oi-delete"></span>
        </button>
    </td>
</tr>}
    </tbody>

</table>}
    @code { private List<job_location> job_locations;

                protected async override Task OnInitializedAsync()
                {
                    job_locations = await _client.GetFromJsonAsync<List<job_location>>($"{Endpoints.Job_locationsEndpoint}");
                }
                async Task Delete(int job_locationId)
                {
                    var job_location = job_locations.First(q => q.Id == job_locationId);
                    var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {job_location.location_Name}?");
                    if (confirm)
                    {
                        await _client.DeleteAsync($"{Endpoints.Job_locationsEndpoint}/{job_locationId}");
                        await OnInitializedAsync();
                    }
                } }
