@page "/Company_infos/"
@inject HttpClient _client
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<style>
    h3 {
        text-align: center;
        font-size: 200%;
    }
    img {
        max-width: 100%;
        max-height: 100%;
        display: inline-block;
        border: 5px solid #555;
    }

    .box.small1 {
        height: 100px;

    }
</style>
<h3 class="card-title">Company Information</h3>
<br />
<AuthorizeView Roles="Administrator,Admin">
    <a href="/Company_infos/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Create New Company
    </a>

    </AuthorizeView>
    <br />
    <br />
    @if (Company_infos == null)
    {
        <div class="alert alert-info">Loading Company infos....</div> }
    else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Mission</th>
                    <th>Contact</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Company_info in Company_infos)
                {


                        if (Company_info.CreatedBy == _currentUserName)
                        {

                    <tr>
                        <td>@Company_info.Name</td>
                        <td>@Company_info.Address</td>
                        <td>@Company_info.Mission</td>
                        <td>@Company_info.Contact</td>
                        <td>
                            <a href="/Company_infos/view/@Company_info.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/Company_infos/edit/@Company_info.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(Company_info.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>

                        }

                }
            </tbody>

        </table>}
    @code { private List<Company_info> Company_infos;

        private List<AppUser> AppUsers;
        private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
        private string _currentUserId;
        private string _currentUserName;

        protected async override Task OnInitializedAsync()
        {
            AppUsers = await
        _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
            var authState = await
            AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                _claims = user.Claims;
                _currentUserName = user.Identity.Name;
                if (_claims.Count() > 0)
                {
                    foreach (var claim in _claims)
                    {
                        if (claim.Type == "sub")
                        {
                            _currentUserId = claim.Value;
                            continue;
                        }
                        if (claim.Type == "name")
                        {
                            _currentUserName = claim.Value;
                            continue;
                        }
                    }
                }
            }

            Company_infos = await _client.GetFromJsonAsync<List<Company_info>>($"{Endpoints.Company_infosEndpoint}");
        }
        async Task Delete(int Company_infoId)
        {
            var Company_info = Company_infos.First(q => q.Id == Company_infoId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Company_info.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.Company_infosEndpoint}/{Company_infoId}");
                await OnInitializedAsync();
            }
        }

        public void Dispose()
        {
            js.InvokeVoidAsync("DataTablesDispose", "#Company_infosTable");
        }
    }
